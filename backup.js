/**
 * Mutual Transfer Project - Automated Backup Script
 * 
 * рдпрд╣ рд╕реНрдХреНрд░рд┐рдкреНрдЯ рдЖрдкрдХреЗ рдкреНрд░реЛрдЬреЗрдХреНрдЯ рдХрд╛ рдмреИрдХрдЕрдк рдмрдирд╛рддреА рд╣реИ рдФрд░ рдЗрд╕реЗ Google Drive рдпрд╛ OneDrive рдкрд░ 
 * рдЕрдкрд▓реЛрдб рдХрд░рдиреЗ рдХреЗ рдирд┐рд░реНрджреЗрд╢ рджреЗрддреА рд╣реИред
 * 
 * рдЙрдкрдпреЛрдЧ: 
 * 1. node backup.js - рд╡рд░реНрддрдорд╛рди рдкреНрд░реЛрдЬреЗрдХреНрдЯ рдХрд╛ рдмреИрдХрдЕрдк рдмрдирд╛рддрд╛ рд╣реИ
 * 
 * рдЖрд╡рд╢реНрдпрдХрддрд╛рдПрдБ:
 * - Node.js
 * - fs-extra, archiver, рдФрд░ moment рдкреИрдХреЗрдЬ
 */

import { Storage } from '@google-cloud/storage';
import fs from 'fs';
import archiver from 'archiver';
import path from 'path';
import { fileURLToPath } from 'url';
import moment from 'moment';

// ES рдореЙрдбреНрдпреВрд▓ рдореЗрдВ __dirname рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Config
const config = {
  backupDir: path.join(__dirname, 'backups'),
  excludeDirs: ['node_modules', '.git', 'backups'],
  keepBackups: 5 // рдХрд┐рддрдиреЗ рдмреИрдХрдЕрдк рдлрд╛рдЗрд▓реНрд╕ рд░рдЦрдирд╛ рд╣реИ
};

/**
 * рдкреНрд░реЛрдЬреЗрдХреНрдЯ рдХрд╛ рдмреИрдХрдЕрдк рдмрдирд╛рддрд╛ рд╣реИ
 */
async function createBackup() {
  try {
    // рдмреИрдХрдЕрдк рдбрд╛рдпрд░реЗрдХреНрдЯрд░реА рдмрдирд╛рдПрдБ, рдЕрдЧрд░ рдореМрдЬреВрдж рдирд╣реАрдВ рд╣реИ рддреЛ
    await fs.ensureDir(config.backupDir);
    
    // рдмреИрдХрдЕрдк рдлрд╛рдЗрд▓ рдХрд╛ рдирд╛рдо - рддрд╛рд░реАрдЦ рдФрд░ рд╕рдордп рдХреЗ рд╕рд╛рде
    const timestamp = moment().format('YYYY-MM-DD-HH-mm-ss');
    const backupFileName = `mutual-transfer-backup-${timestamp}.zip`;
    const backupFilePath = path.join(config.backupDir, backupFileName);
    
    // zip рдлрд╛рдЗрд▓ рдФрд░ рд╕реНрдЯреНрд░реАрдо рд╕реЗрдЯрдЕрдк
    const output = fs.createWriteStream(backupFilePath);
    const archive = archiver('zip', {
      zlib: { level: 9 } // рдЕрдзрд┐рдХрддрдо рдХрдореНрдкреНрд░реЗрд╢рди
    });
    
    // рдкрд╛рдЗрдк рдЖрд░реНрдХрд╛рдЗрд╡ рдбреЗрдЯрд╛ рдХреЛ рдЖрдЙрдЯрдкреБрдЯ рдлрд╛рдЗрд▓ рдореЗрдВ
    archive.pipe(output);
    
    // Google Cloud Service Account рдХреНрд░реЗрдбреЗрдВрд╢рд┐рдпрд▓ рдлрд╛рдЗрд▓ рдХреЛ рдЗрдЧреНрдиреЛрд░ рдХрд░реЗрдВ
    archive.glob('**/*', {
      cwd: __dirname,
      ignore: [
        'node_modules/**',
        backupFileName,
        'backup.js',
        '.git/**',
        '*.log',
        'serviceAccountKey.json',
        'build/**',
        'dist/**'
      ]
    });
    
    // рдЖрд░реНрдХрд╛рдЗрд╡ рдХреЛ рдлрд╛рдЗрдирд▓рд╛рдЗрдЬ рдХрд░реЗрдВ
    await new Promise((resolve, reject) => {
      output.on('close', resolve);
      archive.on('error', reject);
      archive.finalize();
    });
    
    // рдкреНрд░рддреАрдХреНрд╖рд╛ рдХрд░реЗрдВ рдХрд┐ рдЖрдЙрдЯрдкреБрдЯ рд╕реНрдЯреНрд░реАрдо рд╕рдорд╛рдкреНрдд рд╣реЛ рдЬрд╛рдП
    return new Promise((resolve, reject) => {
      output.on('close', () => {
        console.log(`тЬЕ рдмреИрдХрдЕрдк рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдмрдирд╛рдпрд╛ рдЧрдпрд╛: ${backupFileName}`);
        console.log(`ЁЯУж рдмреИрдХрдЕрдк рд╕рд╛рдЗрдЬрд╝: ${(fs.statSync(backupFilePath).size / 1024 / 1024).toFixed(2)} MB`);
        console.log(`ЁЯУВ рдмреИрдХрдЕрдк рд▓реЛрдХреЗрд╢рди: ${backupFilePath}`);
        
        // рдкреБрд░рд╛рдиреЗ рдмреИрдХрдЕрдкреНрд╕ рдХреЛ рд╣рдЯрд╛рдПрдБ
        cleanupOldBackups().then(resolve).catch(reject);
      });
      
      output.on('error', reject);
    });
  } catch (error) {
    console.error('тЭМ рдмреИрдХрдЕрдк рдмрдирд╛рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐:', error);
  }
}

/**
 * рдкреБрд░рд╛рдиреЗ рдмреИрдХрдЕрдкреНрд╕ рдХреЛ рд╣рдЯрд╛рддрд╛ рд╣реИ рдФрд░ рд╕рд┐рд░реНрдл рдирд┐рд░реНрджрд┐рд╖реНрдЯ рд╕рдВрдЦреНрдпрд╛ рдореЗрдВ рд╣рд╛рд▓ рд╣реА рдХреЗ рдмреИрдХрдЕрдкреНрд╕ рдХреЛ рд░рдЦрддрд╛ рд╣реИ
 */
async function cleanupOldBackups() {
  try {
    // рдмреИрдХрдЕрдк рдлреЛрд▓реНрдбрд░ рдХреА рд╕рднреА рдлрд╛рдЗрд▓реНрд╕ рдкрдврд╝реЗрдВ
    const files = await fs.readdir(config.backupDir);
    
    // рд╕рд┐рд░реНрдл zip рдлрд╛рдЗрд▓реНрд╕ рдлрд╝рд┐рд▓реНрдЯрд░ рдХрд░реЗрдВ рдФрд░ рдЙрдиреНрд╣реЗрдВ рдбреЗрдЯ рдХреЗ рдЕрдиреБрд╕рд╛рд░ рд╕реЙрд░реНрдЯ рдХрд░реЗрдВ (рдирдП рд╕реЗ рдкреБрд░рд╛рдиреЗ)
    const zipFiles = files
      .filter(file => file.endsWith('.zip') && file.includes('mutual-transfer-backup'))
      .map(file => ({
        name: file,
        path: path.join(config.backupDir, file),
        time: fs.statSync(path.join(config.backupDir, file)).mtime.getTime()
      }))
      .sort((a, b) => b.time - a.time);
    
    // рдХреЗрд╡рд▓ рдирдП рдмреИрдХрдЕрдкреНрд╕ рдХреЛ рд░рдЦреЗрдВ, рдмрд╛рдХреА рд╣рдЯрд╛ рджреЗрдВ
    if (zipFiles.length > config.keepBackups) {
      const filesToDelete = zipFiles.slice(config.keepBackups);
      
      for (const file of filesToDelete) {
        await fs.remove(file.path);
        console.log(`ЁЯЧСя╕П рдкреБрд░рд╛рдирд╛ рдмреИрдХрдЕрдк рд╣рдЯрд╛рдпрд╛ рдЧрдпрд╛: ${file.name}`);
      }
      
      console.log(`тД╣я╕П рдХреБрд▓ ${filesToDelete.length} рдкреБрд░рд╛рдиреЗ рдмреИрдХрдЕрдк рд╣рдЯрд╛рдП рдЧрдПред`);
    }
  } catch (error) {
    console.error('тЭМ рдкреБрд░рд╛рдиреЗ рдмреИрдХрдЕрдкреНрд╕ рдХреЛ рд╣рдЯрд╛рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐:', error);
  }
}

/**
 * рдХреНрд▓рд╛рдЙрдб рдмреИрдХрдЕрдк рдХреЗ рд▓рд┐рдП рдирд┐рд░реНрджреЗрд╢
 */
function showCloudInstructions() {
  console.log('\n========== рдХреНрд▓рд╛рдЙрдб рдмреИрдХрдЕрдк рдирд┐рд░реНрджреЗрд╢ ==========');
  console.log('рдЕрдкрдиреЗ рдкреНрд░реЛрдЬреЗрдХреНрдЯ рдХреЗ рдмреИрдХрдЕрдк рдХреЛ рдХреНрд▓рд╛рдЙрдб рдкрд░ рдЕрдкрд▓реЛрдб рдХрд░рдиреЗ рдХреЗ рдЪрд░рдг:');
  console.log('\n1я╕ПтГг Google Drive рдкрд░ рдЕрдкрд▓реЛрдб:');
  console.log('   - drive.google.com рдкрд░ рдЬрд╛рдПрдБ рдФрд░ рд▓реЙрдЧрд┐рди рдХрд░реЗрдВ');
  console.log('   - "рдирдпрд╛" рдпрд╛ "+" рдмрдЯрди рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВ рдФрд░ "рдлрд╛рдЗрд▓ рдЕрдкрд▓реЛрдб" рдЪреБрдиреЗрдВ');
  console.log('   - "backups" рдлреЛрд▓реНрдбрд░ рд╕реЗ рдЕрдкрдирд╛ рдмреИрдХрдЕрдк рдЪреБрдиреЗрдВ');
  
  console.log('\n2я╕ПтГг OneDrive рдкрд░ рдЕрдкрд▓реЛрдб:');
  console.log('   - onedrive.live.com рдкрд░ рдЬрд╛рдПрдБ рдФрд░ рд▓реЙрдЧрд┐рди рдХрд░реЗрдВ');
  console.log('   - "рдЕрдкрд▓реЛрдб" рдмрдЯрди рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВ рдФрд░ "рдлрд╛рдЗрд▓реНрд╕" рдЪреБрдиреЗрдВ');
  console.log('   - "backups" рдлреЛрд▓реНрдбрд░ рд╕реЗ рдЕрдкрдирд╛ рдмреИрдХрдЕрдк рдЪреБрдиреЗрдВ');
  
  console.log('\n3я╕ПтГг рдСрдЯреЛрдореЗрдЯрд┐рдХ рдХреНрд▓рд╛рдЙрдб рдмреИрдХрдЕрдк рд╕реЗрдЯрдЕрдк:');
  console.log('   - Google Drive рдпрд╛ OneDrive рдбреЗрд╕реНрдХрдЯреЙрдк рдПрдкреНрд▓рд┐рдХреЗрд╢рди рдЗрдВрд╕реНрдЯреЙрд▓ рдХрд░реЗрдВ');
  console.log('   - рдмреИрдХрдЕрдк рдлреЛрд▓реНрдбрд░ рдХреЛ рд╕рд┐рдВрдХ рдлреЛрд▓реНрдбрд░ рдореЗрдВ рдореВрд╡ рдХрд░реЗрдВ рдпрд╛ рдХреЙрдкреА рдХрд░реЗрдВ');
  console.log('   - рдЕрдм рдЖрдкрдХреЗ рдмреИрдХрдЕрдк рд╕реНрд╡рдЪрд╛рд▓рд┐рдд рд░реВрдк рд╕реЗ рдХреНрд▓рд╛рдЙрдб рдкрд░ рд╕рд┐рдВрдХ рд╣реЛрдВрдЧреЗ');
  
  console.log('\nтЬи рд╕реБрдЭрд╛рд╡: рдорд╣рддреНрд╡рдкреВрд░реНрдг рдЕрдкрдбреЗрдЯ рдХрд░рдиреЗ рд╕реЗ рдкрд╣рд▓реЗ рд╣рдореЗрд╢рд╛ рдмреИрдХрдЕрдк рд▓реЗрдВ');
  console.log('====================================\n');
}

// рдореБрдЦреНрдп рдкреНрд░реЛрдЧреНрд░рд╛рдо
async function main() {
  console.log('ЁЯФД рдореБрдЪреБрдЕрд▓ рдЯреНрд░рд╛рдВрд╕рдлрд░ рдкреНрд░реЛрдЬреЗрдХреНрдЯ рдмреИрдХрдЕрдк рдкреНрд░рдХреНрд░рд┐рдпрд╛ рд╢реБрд░реВ рд╣реБрдИ...');
  
  await createBackup();
  showCloudInstructions();
  
  console.log('тЬи рдмреИрдХрдЕрдк рдкреНрд░рдХреНрд░рд┐рдпрд╛ рдкреВрд░реА рд╣реБрдИред');
}

// рд╕реНрдХреНрд░рд┐рдкреНрдЯ рд╢реБрд░реВ рдХрд░реЗрдВ
main().catch(err => {
  console.error('тЭМ рдмреИрдХрдЕрдк рдкреНрд░рдХреНрд░рд┐рдпрд╛ рдореЗрдВ рддреНрд░реБрдЯрд┐:', err);
  process.exit(1);
}); 